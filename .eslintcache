[{"C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\index.tsx":"1","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\reportWebVitals.ts":"2","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\App.tsx":"3","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Queries\\DiscoverDevices.ts":"4","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\DiscoveryWrapper.tsx":"5","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Dashboards.tsx":"6","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\DevicePage.tsx":"7","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Flashcard.tsx":"8","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Queries\\FetchSystemStats.ts":"9","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\IPInput.tsx":"10","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Graphs.tsx":"11","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Graph.tsx":"12","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Networks.tsx":"13"},{"size":875,"mtime":1612332341942,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":1577,"mtime":1614842425421,"results":"17","hashOfConfig":"15"},{"size":1244,"mtime":1629664873342,"results":"18","hashOfConfig":"15"},{"size":5219,"mtime":1629669526734,"results":"19","hashOfConfig":"15"},{"size":1014,"mtime":1614842434150,"results":"20","hashOfConfig":"15"},{"size":4275,"mtime":1681667643853,"results":"21","hashOfConfig":"15"},{"size":2905,"mtime":1614842385033,"results":"22","hashOfConfig":"15"},{"size":1996,"mtime":1612936323222,"results":"23","hashOfConfig":"15"},{"size":4602,"mtime":1612946168069,"results":"24","hashOfConfig":"15"},{"size":1803,"mtime":1681667396438,"results":"25","hashOfConfig":"15"},{"size":4275,"mtime":1681666162633,"results":"26","hashOfConfig":"15"},{"size":1534,"mtime":1681668111126,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"6f6zff",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"31"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"31"},"C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\index.tsx",["67"],"import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.info);\n",["68","69"],"C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\reportWebVitals.ts",[],"C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\App.tsx",["70","71","72","73","74"],"import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {  useQuery, useMutation,  useQueryClient,QueryClient,QueryClientProvider,} from 'react-query'\nimport { discovery_devices } from './Queries/DiscoverDevices';\nimport { ReactQueryDevtools } from 'react-query/devtools'\nimport { DiscoveryWrapper } from './Components/DiscoveryWrapper';\nimport { DashboardPage } from './Components/Dashboards';\nimport { DevicePage } from './Components/DevicePage';\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  const [selectedPI, setSelectedPi] = useState<URL| null>();//\"http://192.168.0.14:4321\")\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ReactQueryDevtools initialIsOpen={false} />\n      <DiscoveryWrapper>\n        {(urls: URL[])=>\n        { \n          return  selectedPI ? <DevicePage ip={(selectedPI as unknown as string)} goBack={() => setSelectedPi(null)} /> : <DashboardPage urls={urls} setSelectedPi={setSelectedPi}/>\n        \n        }\n        }\n      </DiscoveryWrapper>\n    </QueryClientProvider>\n  );\n}\n\n\n\nconst Content = () => {\n\n  \n  \n  return (<div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        \n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  )\n}\nexport default App;\n","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Queries\\DiscoverDevices.ts",["75"],"// import find from 'local-devices'\r\nimport { UseQueryOptions } from 'react-query'\r\nimport { getIPRange } from 'get-ip-range';\r\n// import arp from 'arptable-js'\r\n\r\nexport const  discovery_devices = (): Promise<String[] |void> => {\r\n    // console.log(\"discovering\")\r\n    // arp.get((table)=>console.log(JSON.stringify(table)))\r\n\r\n    let range = getIPRange('192.168.0.0/24')\r\n    let ar= range.map(discovery_request);\r\n\r\n    return Promise.all(ar);\r\n}\r\n\r\nconst discovery_request =(ip: string):Promise<String> =>  {\r\n    return fetch(\"http://\"+ip+\":4321/system/hostname\",{}).then(response => response.json())\r\n}\r\n\r\nexport const discoverDevicesOptions: UseQueryOptions<any,any,any> = {\r\n    staleTime: 30000, // 30 secs\r\n    refetchInterval: false,//30000, //30 secs\r\n    retry: false,\r\n    enabled: false // will want to set up a button system eventually\r\n}\r\n\r\nasync function fetchWithTimeout(resource:any, options:any) {\r\n    const { timeout = 2000 } = options;\r\n    \r\n    const controller = new AbortController();\r\n    const id = setTimeout(() => controller.abort(), timeout);\r\n  \r\n    const response = await fetch(resource, {\r\n      ...options,\r\n      signal: controller.signal  \r\n    });\r\n    clearTimeout(id);\r\n  \r\n    return response;\r\n  }","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\DiscoveryWrapper.tsx",["76","77","78","79","80","81","82","83","84"],"import { url } from 'inspector';\r\nimport React, { useState } from 'react';\r\nimport { Button, Dropdown, DropdownButton, FormControl, InputGroup, ProgressBar, Spinner } from 'react-bootstrap';\r\nimport { useQuery } from 'react-query';\r\nimport { discoverDevicesOptions, discovery_devices } from '../Queries/DiscoverDevices';\r\nimport { fetchHostname } from '../Queries/FetchSystemStats';\r\nimport { IPInput } from './IPInput';\r\n\r\ninterface IDiscoveryWrapper {\r\n    children: any;\r\n}\r\n\r\nexport const DiscoveryWrapper = (props: IDiscoveryWrapper) => {\r\n    // this is for the discovery queryies\r\n    // const discoveryQuery = useQueries<String[] | void>('discover', discovery_devices, discoverDevicesOptions)\r\n    // const scanForDevices = () => {\r\n    //     discoveryQuery.refetch();\r\n    // }\r\n    \r\n    \r\n    const [urls, setUrls] = useState<URL[] | null>(null)\r\n\r\n    // React.useEffect(()=> {\r\n    //     if(discoveryQuery.data && !discoveryQuery.isPreviousData) {\r\n    //         setUrls()\r\n    //     }\r\n    // }, [discoveryQuery.data])\r\n    React.useEffect(() => {\r\n        if(storageAvailable('localStorage')) {\r\n            let urlJSON = localStorage.getItem(\"saved_devices\");\r\n            let urls: string[] = JSON.parse(urlJSON ? urlJSON : \"[]\")\r\n            if(urls){\r\n                setUrls(urls.map((url) => new URL(url)));\r\n            }else{\r\n                setUrls([])\r\n            }\r\n        }\r\n    },[])\r\n    \r\n    const [setUpPageToggle, setSetUpPageToggle] = useState<boolean>(false);\r\n    const saveState = () => {\r\n        localStorage.setItem('saved_devices', JSON.stringify(urls))\r\n    }\r\n    React.useEffect(() => {\r\n        saveState();\r\n    },[urls])\r\n\r\n\r\n    if(!urls) {\r\n        return (\r\n            <Spinner animation='border' variant='light' />\r\n        )\r\n    }\r\n    \r\n    const addUrl = (url: URL) => {\r\n        setUrls(urls.concat([url]));\r\n    }\r\n    const deleteURL = (urlToDelete: URL) => {\r\n        setUrls(urls.filter(url => url.toString() !== urlToDelete.toString()));\r\n    }\r\n    if(setUpPageToggle){\r\n        return(<div className='container'>\r\n            <h1 className='text-center text-white py-5'>Devices</h1>\r\n            {urls.map((url) => {\r\n                return(<IPInput key={url.toString()} deleteURL={deleteURL} addURL={addUrl} url={url} />)\r\n            })}\r\n            <hr className='bg-secondary w-75 rounded' ></hr>\r\n            <IPInput  key=\"newURL\" addURL={addUrl} deleteURL={deleteURL} ></IPInput>\r\n            {/* {discoveryQuery.isLoading && <ProgressBar now={100} animated />} */}\r\n            <div className=' row pt-5 flex justify-content-center'>\r\n                {/* <Button variant='outline-info' onClick={()=> scanForDevices()} className='mx-auto align-self-center' size='lg'> Scan for Devices</Button> */}\r\n            <Button variant='outline-success' onClick={() => setSetUpPageToggle(!setUpPageToggle)} className='mx-auto align-self-center' size='lg'  >Done</Button>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n    \r\n      return (\r\n          <div className='w-100 container col'>\r\n          {/* <DiscoveryDebug/>   */}\r\n          <div className='row justify-content-end'>\r\n          <Button size='sm' variant='light'className=' col-md-1 p-2 text-center align-self-end  mx-5 mb-3 mt-5'   onClick={()=> setSetUpPageToggle(!setUpPageToggle)}><strong>Edit Devices</strong></Button>\r\n          </div>\r\n          {props.children(urls)}\r\n          </div>\r\n      )\r\n//   }\r\n}\r\n\r\n\r\n\r\nconst DiscoveryDebug = () => {\r\n    const query = useQuery('discover', discovery_devices, {\r\n        ...discoverDevicesOptions,\r\n        refetchOnMount: false,\r\n    });\r\n    const [showDebug, setShowDebug] = useState(false)\r\n    if(showDebug){\r\n    return (\r\n        <p className='w-100  text-white border border-info m-0 rounded-bottom fixed-top'style={{textAlign: 'center'}}> \r\n            Status: {query.status}, Data: {JSON.stringify(query.data)} \r\n            <Button  variant='outline-secondary' size='sm' onClick={()=> setShowDebug(!showDebug)}>\r\n                Click to hide\r\n            </Button> \r\n        </p>\r\n    )\r\n    }\r\n    else {\r\n        return (\r\n            <div className='h-auto float-right'>\r\n            <Button variant='outline-secondary' className='fixed-top' onClick={()=> setShowDebug(!showDebug)}>\r\n                Show Debug\r\n            </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction storageAvailable(type: any) {\r\n    var storage;\r\n    try {\r\n        storage = window[type] as unknown as Storage;\r\n        var x = '__storage_test__';\r\n        storage.setItem(x, x);\r\n        storage.removeItem(x);\r\n        return true;\r\n    }\r\n    catch(e) {\r\n        return e instanceof DOMException && (\r\n            // everything except Firefox\r\n            e.code === 22 ||\r\n            // Firefox\r\n            e.code === 1014 ||\r\n            // test name field too, because code might not be present\r\n            // everything except Firefox\r\n            e.name === 'QuotaExceededError' ||\r\n            // Firefox\r\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n            // acknowledge QuotaExceededError only if there's something already stored\r\n            (storage && storage.length !== 0);\r\n    }\r\n}","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Dashboards.tsx",["85","86","87","88","89","90"],"import React, { useEffect, useState } from 'react';\r\nimport { DevicePage } from './DevicePage';\r\nimport { FlashCard } from './Flashcard';\r\nimport { Graphs } from './Graphs';\r\n\r\n\r\n\r\n\r\nexport interface IDashboardsProps {\r\n    urls: URL[]\r\n    setSelectedPi: (url: URL | null) => void\r\n  }\r\nexport const DashboardPage =(props: IDashboardsProps) => {\r\n    const [graphsViewDevice, setGraphsViewDevice] = useState<URL | null>(null)\r\n  \r\n \r\n    return (\r\n        <div className=\"container-fluid  h-100 text-white justify-content-around \">\r\n      <h2 className='mx-auto center text-center p-3 pb-5'>\r\n        Dashboard\r\n      </h2>\r\n      <div className=' container-fluid  row flex-wrap justify-content-between mx-auto align-items-center '>\r\n        \r\n      {props.urls.map((url, index)=> \r\n        \r\n        \r\n          <FlashCard url={url} setSelectedPi={props.setSelectedPi} />\r\n        \r\n        \r\n    )}\r\n      </div>\r\n    </div>)\r\n        \r\n}\r\n\r\nconst Dashboards = (props: IDashboardsProps) =>{\r\n    \r\n    \r\n}\r\n\r\n\r\n","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\DevicePage.tsx",["91","92","93","94","95","96","97"],"import React, { useState } from 'react';\r\nimport { useQueries, UseQueryResult } from 'react-query';\r\nimport { fetchUptime, fetchHostname, fetchCpuTemp, fiveSecUpdateOptions, fetchLoadAverage, fetchCpuAverage, oneSecondUpdateOptions, fetchNetworks, fetchNetStats } from '../Queries/FetchSystemStats';\r\nimport prettyBytes from 'pretty-bytes'\r\nimport { Alert, Button, Spinner } from 'react-bootstrap';\r\nimport { getLoadString } from './Flashcard';\r\nimport { Graphs } from './Graphs';\r\nimport Networks from './Networks';\r\n\r\n\r\ninterface IDevicePageProps {\r\n    ip: string;\r\n    goBack: () => void;\r\n  }\r\nexport type NetworkResult = {\r\n    networks: NetworkDetails[],\r\n}\r\n\r\n// #[derive(Debug, Clone, PartialEq, Serialize)]\r\n// pub enum IpAddr {\r\n//     Empty,\r\n//     Unsupported,\r\n//     V4(Ipv4Addr),\r\n//     V6(Ipv6Addr),\r\n// }\r\nexport type  NetworkAddrsDetails={\r\n    addr: Record<string, string>,\r\n}\r\n\r\nexport type  NetworkDetails = {\r\n    name: string,\r\n    addrs: NetworkAddrsDetails[],\r\n}\r\n\r\ninterface NetworkStats {\r\n    network_name: string,\r\n     rx_bytes: number,\r\n     tx_bytes: number,\r\n     rx_packets: number,\r\n     tx_packets: number,\r\n     rx_errors: number,\r\n     tx_errors: number,\r\n}\r\ninterface NetworkStatsResults {\r\n    One?: NetworkStats,\r\n    List?: NetworkStats[],\r\n}\r\n\r\n  export const DevicePage = (props: IDevicePageProps ) => {\r\n      \r\n      const [url, setUrl] = useState(new URL(props.ip));\r\n     const [uptimeQ , hostQ, networksQ,  cpuTempQ, loadQ, netStatsQ] = useQueries([\r\n      {queryKey: ['uptime', {url: url}], queryFn: fetchUptime},\r\n      {queryKey: ['hostname', {url: url}], queryFn: fetchHostname},\r\n      {queryKey: ['networks', {url: url}], queryFn: fetchNetworks},\r\n      {queryKey: ['cpu_temp', {url: url}], queryFn: fetchCpuTemp, ...fiveSecUpdateOptions},\r\n      {queryKey: ['load_average', {url: url}], queryFn: fetchLoadAverage, ...fiveSecUpdateOptions},\r\n    //   {queryKey: ['cpu_average', {url: url}], queryFn: fetchCpuAverage, ...oneSecondUpdateOptions}\r\n        {queryKey: ['net_stats', {url: url}], queryFn: fetchNetStats, ...fiveSecUpdateOptions},\r\n  ])\r\n  \r\n  \r\n    const uptime = uptimeQ as UseQueryResult<String>;\r\n    const host = hostQ as UseQueryResult<String>;\r\n    const networks = networksQ as UseQueryResult<{}>;\r\n    const load = loadQ as UseQueryResult<String>;\r\n    const netStats = netStatsQ as UseQueryResult<NetworkStatsResults>;\r\n    let list = netStats.data?.List;\r\n\r\n    //TODO, need to decide on layout below.  Do i want cards? or like tabs?  I think tabs would be smaller. i should prob work on the graph for now.\r\n    return (\r\n      <div className=\"container-fluid text-white m-0 p-0 h-100  \">\r\n          <div className='row justify'>\r\n            <h1 className=' col-10 text-center'>Hostname: {host.data}</h1>\r\n            <Button size='sm' variant='outline-secondary'className='col-1' onClick={()=> props.goBack()}>Go Back</Button>\r\n        </div>\r\n        <div className=' container-fluid d-flex flex-column flex-wrap justify-content-around text-left align-items-center '>\r\n            <Graphs device={props.ip} />\r\n            <div className=' container col bg-secondary rounded  align-items-left '>\r\n                <div className='row  justify-content-start'>\r\n                <p className=' col-xsm m-2 font-weight-light text-light bg-dark rounded p-2'>\r\n                    Uptime: <span>{uptime.data}</span>\r\n                </p>\r\n                <p className='col-xsm m-2 font-weight-light text-light bg-dark rounded p-2'>\r\n                    Load: <span>{getLoadString(load.data)}</span>\r\n                </p> \r\n                {list?.map((eth0)=> {\r\n                    return (\r\n                        eth0?\r\n                <p className='col-xsm m-2 font-weight-light text-light bg-dark rounded p-2'>\r\n                    {JSON.stringify(eth0.network_name)}: <span>{`tx ${prettyBytes(eth0.tx_bytes)} / rx ${prettyBytes(eth0.rx_bytes)}`}</span>\r\n                </p> : null\r\n                    )\r\n                })\r\n                \r\n                }\r\n                </div>   \r\n                <div>\r\n                    <Networks networkData={networksQ.data as NetworkResult}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  ","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Flashcard.tsx",[],"C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Queries\\FetchSystemStats.ts",["98","99","100","101","102","103","104"],"import { UseQueryOptions } from \"react-query\"\r\n\r\n\r\n\r\nexport const fetchUptime = ({queryKey}:any) => {\r\n    const [_key, {url}] = queryKey\r\n    // Fetch mem, uptime, disk_info, networks\r\n    return fetch(url.toString() +\"system/uptime\").then(response => response.json())\r\n}\r\n\r\nexport const fetchHostname = ({queryKey}:any) => {\r\n    const [_key, {url}] = queryKey\r\n    if (!url) {\r\n        return Promise.resolve()\r\n    }\r\n    // Fetch mem, uptime, disk_info, networks\r\n    return fetch(url.toString() +\"system/hostname\").then(response => response.json())\r\n}\r\n\r\nexport const fiveSecUpdateOptions: UseQueryOptions<any,any,any> = {\r\n    // staleTime:1000, // 5 secs\r\n    refetchInterval: 5000, //5 secs\r\n    retry: false\r\n}\r\nexport const fetchCpuTemp = ({queryKey}:any) => {\r\n    const [_key, {url}] = queryKey\r\n    // Fetch mem, uptime, disk_info, networks\r\n    return fetch(url.toString() +\"system/cpu_temp\").then(response => response.json())\r\n}\r\n\r\nexport const fetchLoadAverage = ({queryKey}:any) => {\r\n    const [_key, {url}] = queryKey\r\n    // Fetch mem, uptime, disk_info, networks\r\n    return fetch(url.toString() +\"system/load_average\").then(response => response.json())\r\n}\r\n\r\nexport const fetchCpuAverage = ({queryKey}:any) => {\r\n    const [_key, {url}] = queryKey\r\n    // Fetch mem, uptime, disk_info, networks\r\n    return fetch(url.toString() +\"system/cpu_average\").then(response => response.json())\r\n}\r\n\r\nexport const oneSecondUpdateOptions: UseQueryOptions<any,any,any> = {\r\n    refetchInterval: 1000, //5 secs\r\n    retry: false\r\n}\r\n\r\nexport const fetchNetworks = ({queryKey}:any) => {\r\n    const [_key, {url}] = queryKey\r\n    // Fetch mem, uptime, disk_info, networks\r\n    return fetch(url.toString() +\"system/networks\").then(response => response.json())\r\n}\r\n\r\nexport const fetchNetStats = ({queryKey}:any) => {\r\n    const [_key, {url}] = queryKey\r\n    // Fetch mem, uptime, disk_info, networks\r\n    return fetch(url.toString() +\"system/net_stats\").then(response => response.json())\r\n}","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\IPInput.tsx",["105","106","107","108"],"import React, { useState } from 'react';\r\nimport { Alert, Badge, Button, Dropdown, DropdownButton, Form, FormControl, InputGroup, ProgressBar, Spinner } from 'react-bootstrap';\r\nimport { useQuery } from 'react-query';\r\nimport { fetchHostname } from '../Queries/FetchSystemStats';\r\nimport { BiError } from 'react-icons/bi';\r\n\r\n\r\ninterface IIPInputProps {\r\n    url?: URL,\r\n    addURL: (url: URL) => void,\r\n    deleteURL: (url: URL) =>void,\r\n}\r\n\r\nexport const IPInput = (props: IIPInputProps) => {\r\n\r\n    const [url, setURL] = useState(props.url);\r\n    \r\n    const [newURL, setNewUrl] = useState(\"http://192.168.0.xxx\")\r\n    const [isValid, setIsValid] = useState<boolean | undefined>(true);\r\n    // const [isEditMode, setIsEditMode] = useState()\r\n\r\n   const handleSubmit = (newURL:string) => {\r\n       if(checkIfValidURL(newURL))\r\n       {\r\n        props.addURL(new URL(newURL+\":4321\"))\r\n        setNewUrl(\"http://192.168.0.xxx\")\r\n       }\r\n       else{\r\n           setIsValid(false)\r\n       }\r\n    }\r\n    const onChange = (event: any) => {\r\n        setNewUrl(event.target.value)\r\n        if(!checkIfValidURL(event.target.value)) {\r\n            setIsValid(false)\r\n        }else {\r\n            setIsValid(true)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='row flex flex-row justify-content-center text-white'>\r\n            <div className='col-md align-self-center justify-content-center text-center'>\r\n                <InfoPanel url={url} />\r\n            </div>\r\n            <InputGroup className=\"m-3 col-md\">\r\n\r\n                {url ?\r\n                <>\r\n                    <FormControl readOnly value={`${url.protocol}//${url.hostname}`}/> \r\n                     <DropdownButton\r\n                        as={InputGroup.Append} variant=\"outline-light  \" title=\"Edit\" id=\"input-group-dropdown-2\">\r\n                        {/* <Dropdown.Item onClick={(e)=> console.log)}>Edit</Dropdown.Item> */}\r\n                        <Dropdown.Item className=' ' onClick={()=> props.deleteURL(url)}><span\r\n                                className='rounded  text-danger'>Delete</span></Dropdown.Item>\r\n\r\n                        {/*\r\n                        <Dropdown.Divider /> */}\r\n                        {/* <Dropdown.Item href=\"#\">Delete</Dropdown.Item> */}\r\n                        </DropdownButton>\r\n                </>\r\n                :\r\n                <>\r\n                    <FormControl value={newURL} onChange={onChange} isValid={isValid ? undefined : false} />\r\n\r\n\r\n\r\n                    <InputGroup.Append>\r\n                        <Button variant={isValid?\"outline-success\":\"outline-danger\"} onClick={(e)=>\r\n                            handleSubmit(newURL)}>Save</Button>\r\n\r\n                    </InputGroup.Append>\r\n                </>\r\n                }\r\n                {!isValid ?\r\n                <Badge variant='danger'>\r\n                    <div className='small text-break'> Please enter a valid url. Currently only local devices are\r\n                        supported (eg. \"http://192.168.0.xxx\"). Don't include a port number. </div>\r\n                </Badge> :\r\n                null}\r\n            </InputGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst checkIfValidURL = (urlString: string): boolean => {\r\n    try {\r\n        let url = new URL(urlString);\r\n        // console.log(\"logic below\")\r\n        // console.log(url.protocol === 'http:' && !url.port && url.hostname.startsWith(\"192.168.0.\"))\r\n        return (url.protocol === 'http:' && !url.port && url.hostname.startsWith(\"192.168.0.\"));\r\n    }catch(e){\r\n        console.log(e)\r\n        return false\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst InfoPanel = ({url}:{url?: URL})=> {\r\n    const query = useQuery({queryKey: ['hostname', {url: url}], queryFn: fetchHostname, retry: false})\r\n\r\n    if(!url){\r\n        return <>Enter A URL:</>\r\n    }\r\n\r\n    if(query.isLoading) {\r\n        return (\r\n            <>\r\n              {`${url.protocol}//${url.hostname}`} <Badge className='' pill variant=\"warning\">Attempting to connect <Spinner size='sm' animation='border'/></Badge>\r\n            </>\r\n        )\r\n    }\r\n\r\n    if(query.isError) {\r\n        return (\r\n            <>\r\n            {`${url.protocol}//${url.hostname}`} <Badge className='align-items-center' pill variant='danger'><BiError className='align-items-center'/>Failed to connect to device</Badge>\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n    <>\r\n        <div className='row justify-content-center'>{query.data}\r\n            <div className='mx-3'>\r\n                <Badge className='' pill variant=\"success\">Connected</Badge>\r\n            </div>\r\n        </div> \r\n    </>\r\n    )\r\n}","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Graphs.tsx",["109","110","111","112","113","114","115"],"import React, { useState } from 'react';\r\nimport {ResponsiveLine} from '@nivo/line'\r\nimport { useQuery } from 'react-query';\r\nimport { fetchCpuAverage, oneSecondUpdateOptions } from '../Queries/FetchSystemStats';\r\nimport loadable from '@loadable/component';\r\n\r\nimport './Graphs.css'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Graph } from './Graph';\r\nimport Networks from './Networks';\r\ninterface IGraphsProps {\r\n    device: string\r\n}\r\n\r\nconst GraphList =  ['cpu_temp', 'cpu_average'/*, 'net_stats'*/];\r\n\r\nexport const Graphs = (props: IGraphsProps) => {\r\n    const [selectedGraph, setSelectedGraph] = useState('cpu_average');\r\n    return (\r\n        <div className='shadow text-center text-white  container rounded border-danger bg-dark m-3 w-100'>\r\n            <h1 className='pt-3 pb-1'>Graphs</h1>\r\n            <hr className='bg-secondary w-75'/>\r\n            <div className='row  graph-wrapper' >\r\n                <GraphFilter selectedGraph={selectedGraph} setSelectedGraph={(selectedGraph: string) => setSelectedGraph(selectedGraph)} />\r\n                <Graph url={props.device} selectedGraph={selectedGraph} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const GraphFilter = (props: {selectedGraph: string, setSelectedGraph: (selectedGraph: string)=> void}) => {\r\n    \r\n    \r\n    return <ul className='graph-filter list-group list-group-flush  text-dark w-10'>\r\n        {GraphList.map((name) => {\r\n            return (<li className={`list-group-item  bg-secondary rounded graph-list-item p-1 m-2${props.selectedGraph === name ? ' bg-info': ''}`} key={name} onClick={()=> props.setSelectedGraph(name)}>{name}</li>)\r\n        })}\r\n    </ul>\r\n}\r\n\r\n\r\n// const LoadableGraph = loadable(() => import(\"./Graph\"), {\r\n//     fallback: <Spinner animation='border'/>\r\n//   });\r\n\r\n\r\n\r\n\r\n","C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Graph.tsx",["116","117"],"import { ResponsiveLine } from \"@nivo/line\"\r\nimport React, { useEffect } from \"react\"\r\nimport { useState } from \"react\"\r\nimport { useQueries, useQuery } from \"react-query\"\r\nimport { fetchCpuAverage, fetchCpuTemp, oneSecondUpdateOptions } from \"../Queries/FetchSystemStats\"\r\nimport './Graphs.css'\r\n\r\n\r\ntype GraphDataList = Array<{\r\n    x: number \r\n    y: number \r\n}>\r\ninterface GraphData {\r\n    id: string | number;\r\n    data: GraphDataList\r\n}\r\ntype DataList = Array<GraphData>\r\n\r\ninterface CPUAverageResponse {\r\n    user: number\r\n        nice: number\r\n        system: number\r\n        interrupt: number\r\n        idle: number\r\n}\r\n\r\nconst stringToGraphYAxisMap: Record<string, (s: any)=> number> = {\r\n    \"cpu_average\": (data: CPUAverageResponse) =>   {\r\n        // console.log(`data.idle: ${data.idle}`)\r\n        return 100-(data.idle*100)\r\n    },\r\n    'cpu_temp': (data: number) => data\r\n}\r\n\r\nexport const Graph = (props: {url: string, selectedGraph: string}) => {\r\n    \r\n    const [NumUnitOfTime, setNumUnitOfTime ]=useState(0)\r\n    const [listOfPoints, setlistOfPoints ] = useState<GraphDataList>([])\r\n    const [dataList, setDataList] = useState<DataList>([]);\r\n\r\n    let graphType \r\n    switch (props.selectedGraph) {\r\n        case \"cpu_average\":\r\n            graphType = async (queryKey: any) => {\r\n                let data = await fetchCpuAverage(queryKey);\r\n                return data\r\n                // the below breaks b/c of the return datatype is differnt than what the below code expects\r\n                // it hits the func below twice.  But we'll use the below approach when combining the data\r\n                // return stringToGraphYAxisMap['cpu_average'](data);\r\n            };;\r\n            break;\r\n        case \"cpu_temp\": \r\n            graphType = async (queryKey: any) => {\r\n                let data = await fetchCpuTemp(queryKey);\r\n                return stringToGraphYAxisMap['cpu_temp'](data);\r\n            };\r\n            break;\r\n        default :\r\n            graphType=fetchCpuAverage;\r\n            break;\r\n    \r\n    }\r\n\r\n    // const queries = useQueries({\r\n    //     queries: [\r\n    //         {queryKey: [props.selectedGraph, props], queryFn: }\r\n    //     ]\r\n    // })\r\n\r\n    const query = useQuery<CPUAverageResponse | number>([props.selectedGraph,props], graphType, oneSecondUpdateOptions)\r\n    \r\n    useEffect(() => {\r\n        console.log(\"changed graph type\")\r\n        setDataList([])\r\n        setNumUnitOfTime(0)\r\n        setlistOfPoints([])\r\n    },[props.selectedGraph])\r\n    React.useEffect(()=> {\r\n        if( query.data && !query.isPreviousData){\r\n            setNumUnitOfTime(NumUnitOfTime+1); \r\n            // console.log(stringToGraphYAxisMap[props.selectedGraph](query.data))\r\n            //@ts-ignore\r\n            setlistOfPoints(listOfPoints.concat([{x: NumUnitOfTime, y: stringToGraphYAxisMap[props.selectedGraph](query.data)}]))\r\n            \r\n        }\r\n    }, [query.data])\r\n    \r\n    //create new data list with newest list of points\r\n    React.useEffect(()=> {\r\n        let listToUse = listOfPoints;\r\n        if(listOfPoints.length > 60) {\r\n            listToUse = listOfPoints.slice(listOfPoints.length-60, listOfPoints.length);\r\n        }\r\n        const dataObject: GraphData = {\r\n            id: props.selectedGraph,\r\n            data: listToUse\r\n        }\r\n        setDataList([dataObject])\r\n    }, [props.selectedGraph, listOfPoints])\r\n\r\n    return (\r\n        <>\r\n        <div className='graph-container'>\r\n            \r\n            <ResponsiveLine\r\n                        data={dataList}\r\n                        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n                        enablePoints={false}\r\n                        enableGridX={false}\r\n                        curve=\"basis\"\r\n                        theme={{\r\n                            background: '#eeeeee'\r\n                        }}\r\n                        colors={{ scheme: 'red_blue' }}\r\n                        xScale={{ type: 'linear' , min: (dataList[0]?.data[0]?.x ), max: dataList[0]?.data[0]?.x + 60}}\r\n                        yScale={{ type: 'linear', min: 0, max: 100, stacked: true, reverse: false }}\r\n            />\r\n        <h3 className='p-2'>{props.selectedGraph}</h3>   \r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}",["118","119"],"C:\\Users\\pgive\\Documents\\GitHub\\system-info-service\\fleet-monitor\\src\\Components\\Networks.tsx",["120"],"import { Spinner, Alert } from \"react-bootstrap\"\r\nimport { NetworkResult, NetworkDetails, NetworkAddrsDetails } from \"./DevicePage\"\r\nimport './Networks.scss'\r\n\r\nexport default ({networkData}: {networkData: NetworkResult}) => {\r\n    if (!networkData) {\r\n        return <Spinner animation='border'/>\r\n    }\r\n    \r\n    if (!networkData.networks) {\r\n        return <Alert variant='danger'>No networks found</Alert>\r\n    }\r\n    return (\r\n        <>\r\n            <p className='h2 text-dark text-center'>\r\n                Networks\r\n            </p>\r\n            {/* <div className='networks-list-container'> */}\r\n            <div className='card-deck'>\r\n                {networkData ? networkData.networks.map((network: NetworkDetails) => <NetworkCard network={network} />) : <Spinner animation='border' />}\r\n            </div>\r\n        </>\r\n    )\r\n  }\r\n\r\nexport const NetworkCard = ({network}: {network: NetworkDetails}) => {\r\n    return (\r\n        <div className='network-container  bg-dark text-light m-2'>\r\n            <div className='network-name card-header p-2'>\r\n                <div className='card-title'>{network.name}</div>\r\n            </div>\r\n            <div className='network-addrs card-body'>\r\n                {network.addrs.map((addressDetails: NetworkAddrsDetails, index) => \r\n                <div className=\"address-details\" key={index}>\r\n                    {`IP${Object.keys(addressDetails.addr)[0]}:  ${Object.values(addressDetails.addr)[0]}`}\r\n                </div>)}\r\n            </div>\r\n        </div>\r\n    )\r\n  }",{"ruleId":"121","severity":1,"message":"122","line":6,"column":13,"nodeType":"123","messageId":"124","endLine":6,"endColumn":38},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"121","severity":1,"message":"129","line":5,"column":11,"nodeType":"123","messageId":"124","endLine":5,"endColumn":19},{"ruleId":"121","severity":1,"message":"130","line":5,"column":21,"nodeType":"123","messageId":"124","endLine":5,"endColumn":32},{"ruleId":"121","severity":1,"message":"131","line":5,"column":35,"nodeType":"123","messageId":"124","endLine":5,"endColumn":49},{"ruleId":"121","severity":1,"message":"132","line":6,"column":10,"nodeType":"123","messageId":"124","endLine":6,"endColumn":27},{"ruleId":"121","severity":1,"message":"133","line":34,"column":7,"nodeType":"123","messageId":"124","endLine":34,"endColumn":14},{"ruleId":"121","severity":1,"message":"134","line":27,"column":16,"nodeType":"123","messageId":"124","endLine":27,"endColumn":32},{"ruleId":"121","severity":1,"message":"135","line":1,"column":10,"nodeType":"123","messageId":"124","endLine":1,"endColumn":13},{"ruleId":"121","severity":1,"message":"136","line":3,"column":18,"nodeType":"123","messageId":"124","endLine":3,"endColumn":26},{"ruleId":"121","severity":1,"message":"137","line":3,"column":28,"nodeType":"123","messageId":"124","endLine":3,"endColumn":42},{"ruleId":"121","severity":1,"message":"138","line":3,"column":44,"nodeType":"123","messageId":"124","endLine":3,"endColumn":55},{"ruleId":"121","severity":1,"message":"139","line":3,"column":57,"nodeType":"123","messageId":"124","endLine":3,"endColumn":67},{"ruleId":"121","severity":1,"message":"140","line":3,"column":69,"nodeType":"123","messageId":"124","endLine":3,"endColumn":80},{"ruleId":"121","severity":1,"message":"141","line":6,"column":10,"nodeType":"123","messageId":"124","endLine":6,"endColumn":23},{"ruleId":"142","severity":1,"message":"143","line":46,"column":7,"nodeType":"144","endLine":46,"endColumn":13,"suggestions":"145"},{"ruleId":"121","severity":1,"message":"146","line":92,"column":7,"nodeType":"123","messageId":"124","endLine":92,"endColumn":21},{"ruleId":"121","severity":1,"message":"147","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"148","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":20},{"ruleId":"121","severity":1,"message":"149","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":16},{"ruleId":"121","severity":1,"message":"150","line":14,"column":12,"nodeType":"123","messageId":"124","endLine":14,"endColumn":28},{"ruleId":"121","severity":1,"message":"151","line":14,"column":30,"nodeType":"123","messageId":"124","endLine":14,"endColumn":49},{"ruleId":"121","severity":1,"message":"152","line":36,"column":7,"nodeType":"123","messageId":"124","endLine":36,"endColumn":17},{"ruleId":"121","severity":1,"message":"153","line":3,"column":92,"nodeType":"123","messageId":"124","endLine":3,"endColumn":107},{"ruleId":"121","severity":1,"message":"154","line":3,"column":109,"nodeType":"123","messageId":"124","endLine":3,"endColumn":131},{"ruleId":"121","severity":1,"message":"155","line":5,"column":10,"nodeType":"123","messageId":"124","endLine":5,"endColumn":15},{"ruleId":"121","severity":1,"message":"156","line":5,"column":25,"nodeType":"123","messageId":"124","endLine":5,"endColumn":32},{"ruleId":"121","severity":1,"message":"157","line":51,"column":19,"nodeType":"123","messageId":"124","endLine":51,"endColumn":25},{"ruleId":"121","severity":1,"message":"158","line":52,"column":42,"nodeType":"123","messageId":"124","endLine":52,"endColumn":50},{"ruleId":"121","severity":1,"message":"159","line":65,"column":11,"nodeType":"123","messageId":"124","endLine":65,"endColumn":19},{"ruleId":"121","severity":1,"message":"160","line":6,"column":12,"nodeType":"123","messageId":"124","endLine":6,"endColumn":16},{"ruleId":"121","severity":1,"message":"160","line":12,"column":12,"nodeType":"123","messageId":"124","endLine":12,"endColumn":16},{"ruleId":"121","severity":1,"message":"160","line":26,"column":12,"nodeType":"123","messageId":"124","endLine":26,"endColumn":16},{"ruleId":"121","severity":1,"message":"160","line":32,"column":12,"nodeType":"123","messageId":"124","endLine":32,"endColumn":16},{"ruleId":"121","severity":1,"message":"160","line":38,"column":12,"nodeType":"123","messageId":"124","endLine":38,"endColumn":16},{"ruleId":"121","severity":1,"message":"160","line":49,"column":12,"nodeType":"123","messageId":"124","endLine":49,"endColumn":16},{"ruleId":"121","severity":1,"message":"160","line":55,"column":12,"nodeType":"123","messageId":"124","endLine":55,"endColumn":16},{"ruleId":"121","severity":1,"message":"155","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":15},{"ruleId":"121","severity":1,"message":"161","line":2,"column":58,"nodeType":"123","messageId":"124","endLine":2,"endColumn":62},{"ruleId":"121","severity":1,"message":"140","line":2,"column":89,"nodeType":"123","messageId":"124","endLine":2,"endColumn":100},{"ruleId":"121","severity":1,"message":"162","line":16,"column":17,"nodeType":"123","messageId":"124","endLine":16,"endColumn":23},{"ruleId":"121","severity":1,"message":"163","line":2,"column":9,"nodeType":"123","messageId":"124","endLine":2,"endColumn":23},{"ruleId":"121","severity":1,"message":"129","line":3,"column":10,"nodeType":"123","messageId":"124","endLine":3,"endColumn":18},{"ruleId":"121","severity":1,"message":"153","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":25},{"ruleId":"121","severity":1,"message":"154","line":4,"column":27,"nodeType":"123","messageId":"124","endLine":4,"endColumn":49},{"ruleId":"121","severity":1,"message":"164","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":16},{"ruleId":"121","severity":1,"message":"156","line":8,"column":10,"nodeType":"123","messageId":"124","endLine":8,"endColumn":17},{"ruleId":"121","severity":1,"message":"165","line":10,"column":8,"nodeType":"123","messageId":"124","endLine":10,"endColumn":16},{"ruleId":"121","severity":1,"message":"166","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":20},{"ruleId":"142","severity":1,"message":"167","line":86,"column":8,"nodeType":"144","endLine":86,"endColumn":20,"suggestions":"168"},{"ruleId":"125","replacedBy":"169"},{"ruleId":"127","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":5,"column":1,"nodeType":"173","endLine":24,"endColumn":4},"@typescript-eslint/no-unused-vars","'serviceWorkerRegistration' is defined but never used.","Identifier","unusedVar","no-native-reassign",["174"],"no-negated-in-lhs",["175"],"'useQuery' is defined but never used.","'useMutation' is defined but never used.","'useQueryClient' is defined but never used.","'discovery_devices' is defined but never used.","'Content' is assigned a value but never used.","'fetchWithTimeout' is defined but never used.","'url' is defined but never used.","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'FormControl' is defined but never used.","'InputGroup' is defined but never used.","'ProgressBar' is defined but never used.","'fetchHostname' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'saveState'. Either include it or remove the dependency array.","ArrayExpression",["176"],"'DiscoveryDebug' is assigned a value but never used.","'useEffect' is defined but never used.","'DevicePage' is defined but never used.","'Graphs' is defined but never used.","'graphsViewDevice' is assigned a value but never used.","'setGraphsViewDevice' is assigned a value but never used.","'Dashboards' is assigned a value but never used.","'fetchCpuAverage' is defined but never used.","'oneSecondUpdateOptions' is defined but never used.","'Alert' is defined but never used.","'Spinner' is defined but never used.","'setUrl' is assigned a value but never used.","'cpuTempQ' is assigned a value but never used.","'networks' is assigned a value but never used.","'_key' is assigned a value but never used.","'Form' is defined but never used.","'setURL' is assigned a value but never used.","'ResponsiveLine' is defined but never used.","'loadable' is defined but never used.","'Networks' is defined but never used.","'useQueries' is defined but never used.","React Hook React.useEffect has missing dependencies: 'NumUnitOfTime', 'listOfPoints', 'props.selectedGraph', and 'query.isPreviousData'. Either include them or remove the dependency array. You can also do a functional update 'setNumUnitOfTime(N => ...)' if you only need 'NumUnitOfTime' in the 'setNumUnitOfTime' call.",["177"],["174"],["175"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},"Update the dependencies array to be: [saveState, urls]",{"range":"182","text":"183"},"Update the dependencies array to be: [NumUnitOfTime, listOfPoints, props.selectedGraph, query.data, query.isPreviousData]",{"range":"184","text":"185"},[1667,1673],"[saveState, urls]",[2912,2924],"[NumUnitOfTime, listOfPoints, props.selectedGraph, query.data, query.isPreviousData]"]